# JiraBot github action
# =====================
#
name: jirabot

on:
  pull_request_target:
    types: [opened, reopened]
    branches:
      - "master"
      - "candidate-*"

jobs:
  jirabot:
    runs-on: ubuntu-20.04
    steps:
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.8"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade jira
          python -m pip --version
          python -m pip freeze | grep jira
      - name: "Run"
        env:
          JIRABOT_USERNAME : ${{ secrets.JIRABOT_USERNAME }}
          JIRABOT_PASSWORD : ${{ secrets.JIRABOT_PASSWORD }}
          JIRA_URL : ${{ vars.JIRA_URL }}
          PULL_REQUEST_NUMBER : ${{ github.event.pull_request.number }}
          PULL_REQUEST_TITLE : ${{ github.event.pull_request.title }}
          PULL_REQUEST_AUTHOR_NAME : ${{ github.event.pull_request.user.login }}
          PULL_URL: ${{ github.event.pull_request.html_url }}
          COMMENTS_URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GHUB_JIRA_USER_MAP: ${{ vars.GHUB_JIRA_USER_MAP }}
          JIRA_ISSUE_PROPERTY_MAP: ${{ vars.JIRA_ISSUE_PROPERTY_MAP }}
          JIRA_ISSUE_TRANSITION_MAP: ${{ vars.JIRA_ISSUE_TRANSITION_MAP }}
        run: |
            import os
            import re
            import json
            from jira.client import JIRA

            def updateIssue(jira, issue, prAuthorEmail : str, transitionMap: dict, propertyMap: dict, pull_url: str) -> str:
                result = ''

                statusName = str(issue.fields.status)
                transition = transitionMap.get(statusName, None)

                if transition == None:
                    print('Error: Unable to find transition for status: ' + statusName)
                elif transition != '':
                    try:
                        jira.transition_issue(issue, transition)
                        result += 'Workflow Transition: ' + transition + '\n'
                    except Exception as error:
                        transitions = jira.transitions(issue)
                        result += 'Error: Transition: "' + transition + '" failed with: "' + str(error) + '" Valid transitions=' + str(transitions) + '\n'

                prFieldName = propertyMap.get('pullRequestFieldName', 'customfield_10010')
                try:
                    currentPR = getattr(issue.fields, prFieldName)
                except:
                    currentPR = None
                    print('Error: Unable to get current pull request with field name: ' + prFieldName)

                if currentPR is None:
                    issue.update(fields={prFieldName: pull_url})
                    result += 'Updated PR\n'
                elif currentPR is not None and currentPR != pull_url:
                    result += 'Additional PR: ' + pull_url + '\n'

                if prAuthorEmail:
                    if issue.fields.assignee is None:
                        jira.assign_issue(issue, prAuthorEmail)
                        result += 'Assigning user: ' + prAuthorEmail + '\n'
                    else:
                        assigneeEmail = None
                        if issue.fields.assignee:
                            assigneeEmail = issue.fields.assignee.emailAddress
                        if assigneeEmail is None or assigneeEmail.lower() != assigneeEmail.lower():
                            result += 'Changing assignee from: ' + assigneeEmail + ' to: ' + prAuthorEmail + '\n'
                            jira.assign_issue(issue, prAuthorEmail)

                return result

            jirabot_user = os.environ['JIRABOT_USERNAME']
            jirabot_pass = os.environ['JIRABOT_PASSWORD']
            jira_url = os.environ['JIRA_URL']
            pr = os.environ['PULL_REQUEST_NUMBER']
            title = os.environ['PULL_REQUEST_TITLE']
            prAuthor = os.environ['PULL_REQUEST_AUTHOR_NAME']
            pull_url = os.environ['PULL_URL']
            github_token = os.environ['GITHUB_TOKEN']
            comments_url = os.environ['COMMENTS_URL']

            print("%s %s %s" % (title, prAuthor, comments_url))
            result = ''
            issuem = re.search("(HPCC4J|JAPI)-[0-9]+", title)
            if issuem:
                nameCorrectionPattern = re.compile("hpcc4j", re.IGNORECASE)
                issue_name = nameCorrectionPattern.sub("JAPI",issuem.group())

                userDict = json.loads(os.environ['GHUB_JIRA_USER_MAP'])
                if not isinstance(userDict, dict):
                    userDict = {}

                if prAuthor in userDict:
                    prAuthor = userDict.get(prAuthor)
                    print('Mapped Github user to Jira user: ' + prAuthor)

                options = {
                  'server': jira_url
                }

                jira = JIRA(options=options, basic_auth=(jirabot_user, jirabot_pass))

                # Need to change how we find users for Jira Cloud, unfortunately the API doesn't provide this information.
                # At the moment checking if the URL contains atlassian.net appears to be the easiest way to determine if it's Jira Cloud.
                isJiraCloud = False
                if jira_url.find('atlassian.net') > 0:
                    isJiraCloud = True

                if isJiraCloud:
                    res = jira.search_users(query=prAuthor)
                    if res and len(res) > 0:
                        jiraUser = res[0]
                else:
                    jiraUser = jira.user(prAuthor)

                jiraUserEmail = None
                if jiraUser is None:
                    print('Error: Unable to find Jira user: ' + prAuthor + ' continuing without assigning')
                else:
                    jiraUserEmail = jiraUser.emailAddress

                print("Jira User Email:" + str(jiraUserEmail))

                issue = jira.issue(issue_name)
                result = 'Jirabot Action Result:\n'

                transitionMap = json.loads(os.environ['JIRA_ISSUE_TRANSITION_MAP'])
                if not isinstance(transitionMap, dict):
                    print('Error: JIRA_ISSUE_TRANSITION_MAP is not a valid JSON object, ignoring.')
                    transitionMap = {}

                jiraIssuePropertyMap = json.loads(os.environ['JIRA_ISSUE_PROPERTY_MAP'])
                if not isinstance(jiraIssuePropertyMap, dict):
                    print('Error: JIRA_ISSUE_PROPERTY_MAP is not a valid JSON object, ignoring.')
                    jiraIssuePropertyMap = {}

                result += updateIssue(jira, issue, jiraUserEmail, transitionMap, jiraIssuePropertyMap, pull_url)
                jira.add_comment(issue, result)
            else:
                print('Unable to find Jira issue name in title')

            print(result)
        shell: python