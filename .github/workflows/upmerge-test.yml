name: Upmerge Test

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - "candidate-*"

jobs:
  upmerge-test:
    runs-on: ubuntu-latest
    steps:
      - name: "Debug Vars"
        env:
          PULL_REQUEST_NUMBER : ${{ github.event.pull_request.number }}
          PULL_REQUEST_TITLE : ${{ github.event.pull_request.title }}
          PULL_REQUEST_AUTHOR_NAME : ${{ github.event.pull_request.user.login }}
          PULL_URL: ${{ github.event.pull_request.html_url }}
          COMMENTS_URL: ${{ github.event.pull_request.comments_url }}
          BRANCH_NAME: ${{ github.event.pull_request.base.ref }}
        run: |
          echo "Pull Request Number: $PULL_REQUEST_NUMBER"
          echo "Pull Request Title: $PULL_REQUEST_TITLE"
          echo "Pull Request Author Name: $PULL_REQUEST_AUTHOR_NAME"
          echo "Pull Request URL: $PULL_URL"
          echo "Comments URL: $COMMENTS_URL"
          echo "Branch Name: $BRANCH_NAME"
      - uses: "actions/setup-python@v5"
        with:
          python-version: "3.8"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          fetch-tags: true
      - name: "Run"
        env:
          PULL_REQUEST_NUMBER : ${{ github.event.pull_request.number }}
          PULL_REQUEST_TITLE : ${{ github.event.pull_request.title }}
          PULL_REQUEST_AUTHOR_NAME : ${{ github.event.pull_request.user.login }}
          PULL_URL: ${{ github.event.pull_request.html_url }}
          COMMENTS_URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ github.event.pull_request.base.ref }}
        shell: python
        run: |
            import os
            import re
            import subprocess
            import time
            import sys
            import json

            def extractVersion(versionStr):
                parts = versionStr.split('.')
                if len(parts) != 3:
                    print('Invalid version: ' + versionStr)
                    sys.exit(1)
                if parts[2].lower() == 'x':
                    parts[2] = '0'

                major, minor, point = map(int, parts)
                return [major, minor, point]

            def getTagVersionForCmd(cmd):
                versionPattern = re.compile(r".*([0-9]+\.[0-9]+\.[0-9]+).*")

                # Get latest release version
                gitTagProcess = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
                (output, err) = gitTagProcess.communicate()
                gitTagProcessStatus = gitTagProcess.wait()

                if gitTagProcessStatus != 0:
                    print('Unable to retrieve latest git tag.')
                    sys.exit(1)

                latestGitTag = str(output)

                versionMatch = versionPattern.match(latestGitTag)
                if versionMatch:
                    return extractVersion(versionMatch.group(1))
                else:
                    print('Unable to extract version from git tag.')
                    sys.exit(2)

            def buildBranchString(version):
                major, minor, point = map(int, version)
                return f"candidate-{major}.{minor}.x"

            def createReleaseTagPattern(projectConfig, major = None, minor = None, point = None):
                releaseTagPrefix = projectConfig.get('tagPrefix')
                releaseTagPostfix = projectConfig.get('tagPostfix')

                if releaseTagPrefix is None or releaseTagPostfix is None:
                    print('Error: PROJECT_CONFIG is missing required fields: tagPrefix and/or tagPostfix')
                    sys.exit(1)

                releaseTagPattern = releaseTagPrefix
                if major is not None:
                    releaseTagPattern += str(major) + '\\.'
                else:
                    releaseTagPattern += '[0-9]+\\.'

                if minor is not None:
                    releaseTagPattern += str(minor) + '\\.'
                else:
                    releaseTagPattern += '[0-9]+\\.'

                if point is not None:
                    releaseTagPattern += str(point) + '(-[0-9]+)?'
                else:
                    releaseTagPattern += '[0-9]+(-[0-9]+)?'

                releaseTagPattern += releaseTagPostfix + '$'

                return releaseTagPattern

            def getLatestSemVer(projectConfig, major = None, minor = None, point = None):
                cmd = "git tag --list --sort=-v:refname | grep -E '" + createReleaseTagPattern(projectConfig, major, minor, point) + "' | head -n 1"
                return getTagVersionForCmd(cmd)

            def generateUpMergeBranchList(projectConfig, branchName):
                latestVersion = getLatestSemVer(projectConfig)

                versions = []
                if branchName == "master":
                    return versions
                else:
                    # Extract candidate branch major / minor version
                    candidateBranchPattern = re.compile(r"candidate-([0-9]+\.[0-9]+\.([0-9]+|x)).*")
                    branchVersionMatch = candidateBranchPattern.match(branchName)
                    branchVersion = extractVersion(branchVersionMatch.group(1))

                    # Get latest release in branch
                    latestBranchVer = getLatestSemVer(projectConfig, branchVersion[0], branchVersion[1])

                    curMajor = branchVersion[0]
                    latestMajor = latestVersion[0]
                    while curMajor <= latestMajor:
                        latestVersionInMajor = getLatestSemVer(projectConfig, curMajor)

                        curMinor = 0
                        if curMajor == branchVersion[0]:
                            curMinor = branchVersion[1]

                        latestMinor = latestVersionInMajor[1]

                        while curMinor <= latestMinor:
                            latestPointInMinor = getLatestSemVer(projectConfig, curMajor, curMinor)
                            versions.append(buildBranchString([latestPointInMinor[0], latestPointInMinor[1], latestPointInMinor[2] + 2]))
                            curMinor += 2
                        curMajor += 1

                return versions

            def get_merge_conflict(head, target):
                cmd = [
                    "git", "merge-tree", "--name-only", head, target
                ]
                result = subprocess.run(cmd, capture_output=True, text=True)
                output = result.stdout

                # Check exit code of the merge-tree command
                if result.returncode != 0:
                    return result.stdout
                else:
                    return ""

            def getTargetInBranchVersion(targetBranch):
                # Use git show to get the version from the top-level pom.xml
                cmd = ["git", "show", f"origin/{targetBranch}:pom.xml"]
                result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                pom_content = result.stdout

                version_pattern = re.compile(r'<version>(\s*[0-9]+\.[0-9]+\.[0-9]+(-[0-9]+)?(-SNAPSHOT)?\s*)</version>')
                match = version_pattern.search(pom_content)
                if match:
                    return match.group(1).strip()
                else:
                    print(f"Error: Unable to find version in pom.xml for branch {targetBranch}")
                    sys.exit(1)

            pr = os.environ['PULL_REQUEST_NUMBER']
            title = os.environ['PULL_REQUEST_TITLE']
            user = os.environ['PULL_REQUEST_AUTHOR_NAME']
            pull_url = os.environ['PULL_URL']
            github_token = os.environ['GITHUB_TOKEN']
            branch_name = os.environ['BRANCH_NAME']
            comments_url = os.environ['COMMENTS_URL']

            # Hard coding project config due to empty variables issue
            # projectConfigJson = os.environ['PROJECT_CONFIG']
            # projectConfig = json.loads(projectConfigJson)
            projectConfig = {
                "projectName": "HPCC4J",
                "projectPrefixes": ["HPCC4J"],
                "tagPrefix": "hpcc4j_",
                "tagPostfix": "-release"
            }

            if not isinstance(projectConfig, dict):
                print('Error: PROJECT_CONFIG is not a valid JSON object, aborting.')
                sys.exit(1)

            if 'tagPrefix' not in projectConfig or 'tagPostfix' not in projectConfig:
                print('Error: PROJECT_CONFIG is missing required fields: tagPrefix and/or tagPostfix')
                sys.exit(1)

            upmergeBranches = generateUpMergeBranchList(projectConfig, branch_name)
            upmergeBranches.append("master")

            test_results = {
                "pr_number": pr,
                "pr_title": title,
                "pr_author": user,
                "pr_url": pull_url,
                "base_branch": branch_name,
                "test_timestamp": time.strftime("%Y-%m-%d %H:%M:%S UTC", time.gmtime()),
                "branches_tested": [],
                "conflicts": [],
                "successful_merges": [],
                "summary": ""
            }

            conflicts = []
            successful_merges = []

            # Loop over upmerge versions and check if an upmerge would cause a conflict
            for targetBranch in upmergeBranches:
                print(f"Testing upmerge to {targetBranch}")
                
                branch_result = {
                    "branch": targetBranch,
                    "version": None,
                    "status": "unknown",
                    "conflict_details": None
                }

                try:
                    # Change pom versions
                    inBranchVersion = getTargetInBranchVersion(targetBranch)
                    branch_result["version"] = inBranchVersion
                    
                    cmd = [
                        "mvn", "versions:set",
                        f"-DnewVersion={inBranchVersion}",
                        "-DgenerateBackupPoms=false"
                    ]
                    mvn_result = subprocess.run(cmd, capture_output=True, text=True)
                    if mvn_result.returncode != 0:
                        error_msg = f"Maven version update failed: {mvn_result.stderr}"
                        print(f"Error changing pom version to {inBranchVersion} for {targetBranch}: {mvn_result.stderr}")
                        sys.exit(1)

                    # Check if there is a merge conflict
                    merge_conflict = get_merge_conflict("HEAD", f"origin/{targetBranch}")

                    if merge_conflict != "":
                        print(f"Upmerge to {targetBranch} would cause a conflict.")
                        branch_result["status"] = "conflict"
                        branch_result["conflict_details"] = merge_conflict
                        conflicts.append(targetBranch)
                    else:
                        print(f"Upmerge to {targetBranch} should succeed.")
                        branch_result["status"] = "success"
                        successful_merges.append(targetBranch)
                        
                except Exception as e:
                    error_msg = f"Error during test: {str(e)}"
                    print(f"Error testing {targetBranch}: {error_msg}")
                    sys.exit(1)

                test_results["branches_tested"].append(branch_result)

            test_results["conflicts"] = conflicts
            test_results["successful_merges"] = successful_merges
            
            if conflicts:
                test_results["summary"] = f"Conflicts detected in {len(conflicts)} branches: {', '.join(conflicts)}"

            with open('upmerge-test-results.json', 'w') as f:
                json.dump(test_results, f, indent=2)
            
            with open('upmerge-test-summary.txt', 'w') as f:
                f.write(f"Upmerge Test Results for PR #{pr}\n")
                f.write(f"Title: {title}\n")
                f.write(f"Author: {user}\n")
                f.write(f"Base Branch: {branch_name}\n")
                f.write(f"Test Time: {test_results['test_timestamp']}\n\n")
                f.write(f"SUMMARY: {test_results['summary']}\n\n")
                
                f.write("DETAILED RESULTS:\n")
                for branch_result in test_results["branches_tested"]:
                    f.write(f"\n- Branch: {branch_result['branch']}\n")
                    f.write(f"  Version: {branch_result['version']}\n")
                    f.write(f"  Status: {branch_result['status']}\n")
                    if branch_result.get('conflict_details'):
                        f.write(f"  Conflict Details:\n{branch_result['conflict_details']}\n")

      - name: "Upload Upmerge Test Results"
        uses: actions/upload-artifact@v4
        with:
          name: upmerge-test-results-pr-${{ github.event.pull_request.number }}
          path: |
            upmerge-test-results.json
            upmerge-test-summary.txt
          retention-days: 30

      - name: "Process Results"
        shell: python
        run: |
            import json
            import sys
            import os

            results_file = 'upmerge-test-results.json'

            if not os.path.exists(results_file):
                print(f"Results file {results_file} not found.")
                sys.exit(1)
            with open(results_file, 'r') as f:
                test_results = json.load(f)

            conflicts = test_results.get('conflicts', [])
            if not isinstance(conflicts, list):
                print("Error: 'conflicts' in results file is not a list.")
                sys.exit(1)

            print(test_results["summary"])
            if len(conflicts) > 0:
                sys.exit(1)